(ns transliteration.ukr)

(def mapping {
  "А" "A"
  "а" "a"
  "Б" "B"
  "б" "b"
  "В" "V"
  "в" "v"
  "Г" "H"
  "г" "h"
  "Ґ" "G"
  "ґ" "g"
  "Д" "D"
  "д" "d"
  "Е" "E"
  "е" "e"
  "Є" "Ye"
  "є" "ie"
  "Ж" "Zh"
  "ж" "zh"
  "З" "Z"
  "з" "z"
  "И" "Y"
  "и" "y"
  "І" "I"
  "і" "i"
  "Ї" "Yi"
  "ї" "i"
  "Й" "Y"
  "й" "i"
  "К" "K"
  "к" "k"
  "Л" "L"
  "л" "l"
  "М" "M"
  "м" "m"
  "Н" "N"
  "н" "n"
  "О" "O"
  "о" "o"
  "П" "P"
  "п" "p"
  "Р" "R"
  "р" "r"
  "С" "S"
  "с" "s"
  "Т" "T"
  "т" "t"
  "У" "U"
  "у" "u"
  "Ф" "F"
  "ф" "f"
  "Х" "Kh"
  "х" "kh"
  "Ц" "Ts"
  "ц" "ts"
  "Ч" "Ch"
  "ч" "ch"
  "Ш" "Sh"
  "ш" "sh"
  "Щ" "Shch"
  "щ" "shch"
  "Ю" "Yu"
  "ю" "iu"
  "Я" "Ya"
  "я" "ia"
  "ь" ""
  "'" ""})


(defn transliterate [text]
  (let [t1 (clojure.string/replace text "Зг" "Zgh"); `зг` should be translated as `zgh` instead of `zh`.
        t2 (clojure.string/replace t1 "зг" "zgh")]; works for small and big letters
        (clojure.string/join ""
          (map (fn [letter] (get mapping (str letter) letter)) t2))))



